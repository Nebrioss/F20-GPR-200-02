// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


struct sSphere
{
    vec4 sCenter;
    float sRadius;
};

void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.sCenter = vec4(center, 1.0);
    sphere.sRadius = radius;
}


// sLight: struct to keep light elements together
//	  sCenter: center of light
//	  sColor: color of light
//	  sIntensity: intensity of light
struct sLight
{
    vec4 sCenter;
    vec3 sColor;
    float sIntensity;
};

// initLight: initializing light
//	  light: final light struct
//	  center: center of light
//	  color: color of light
//	  intensity: intensity of light
void initLight(out sLight light, in vec4 center, in vec3 color, in float intensity)
{
    light.sCenter = center;
    light.sColor = color;
    light.sIntensity = intensity;
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    vec3 blackHoleCenter = vec3(0.0, 0.0, -4.0);
    vec3 orbitCenter = blackHoleCenter + vec3(cos(iTime), sin(iTime), 0.0);
    float blackRadius = 0.2;
    float schwartzRadius = 0.4;
    float orbitRadius = 0.1;
    
    sSphere blackSphere;
    initSphere(blackSphere, blackHoleCenter, blackRadius);
    
    sSphere schwartzSphere;
    initSphere(schwartzSphere, blackHoleCenter, schwartzRadius);
    
    sSphere orbitSphere;
    initSphere(orbitSphere, orbitCenter, orbitRadius);
    
    vec3 blackHoleDist;
    blackHoleDist.xy = ray.direction.xy - blackHoleCenter.xy;
    float blackHoleDistSq = dot(blackHoleDist.xy, blackHoleDist.xy);
    float blackRadiusSq = blackSphere.sRadius * blackSphere.sRadius;
    float schwartzRadiusSq = schwartzSphere.sRadius * schwartzSphere.sRadius;
    
    if (blackHoleDistSq <= blackRadiusSq)
    {
        //blackHoleDist.z = blackRadiusSq - blackHoleDistSq;
        
        //vec4 position = blackSphere.sCenter + vec4(blackHoleDist.x, blackHoleDist.y, sqrt(blackHoleDist.z), 1.0);
        
        //vec4 normal = (position - blackSphere.sCenter) / blackSphere.sRadius;
        
        return color4(0.0, 0.0, 0.0, 1.0);
    }
    else if (blackHoleDistSq <= 3.26 * schwartzRadiusSq)
    {
        ray.direction.xy = blackHoleDist.xy * (blackHoleDistSq / schwartzRadius) - blackHoleDist.xy * (schwartzRadiusSq / blackHoleDistSq) + schwartzSphere.sCenter.xy;
    }
    
    vec3 orbitDist;
    orbitDist.xy = ray.direction.xy - orbitCenter.xy;
    float orbitDistSq = dot(orbitDist.xy, orbitDist.xy);
    float orbitRadiusSq = orbitRadius * orbitRadius;
    
    if (orbitDistSq <= orbitRadiusSq)
    {
        sLight light;
        initLight(light, color4(1.0, 1.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0), 100.0);
        
        vec3 lightPos = orbitSphere.sCenter.xyz + vec3(orbitDist.x, orbitDist.y, sqrt(orbitDist.z));
        
        vec3 normal = (lightPos - orbitSphere.sCenter.xyz) / orbitSphere.sRadius;
        vec3 lightVector = normalize(light.sCenter.xyz - vec3(ray.origin.xy, 0.0));
        vec3 diffuseCoefficient = normal * lightVector;

        vec3 attenuation = 1.0 / (1.0 + ((light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) / light.sIntensity) + (((light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) * (light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) / (light.sIntensity * light.sIntensity))));

        vec3 diffuseIntensity = diffuseCoefficient * attenuation;

        return color4(diffuseIntensity.bbb * light.sColor * color3(0.0, 5.0 / 255.0, 125.0 / 225.0), 1.0);
    }
    
    vec3 cubeLoc = ray.direction.xyz;
    
    vec2 mouse = iMouse.xy / iResolution.x;
    
    mat3 rotationMatX = mat3(1.0, 0.0, 0.0, 0.0, cos(mouse.y), sin(mouse.y), 0.0, -sin(mouse.y), cos(mouse.y));
    mat3 rotationMatY = mat3(cos(mouse.x), 0.0, -sin(mouse.x), 0.0, 1.0, 0.0, sin(mouse.x), 0.0, cos(mouse.x));
    cubeLoc = (rotationMatY * rotationMatX) * cubeLoc;
    
    return texture(iChannel0, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}