//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    sCoord uv = fragCoord / iChannelResolution[0].xy;
    fragColor = texture(iChannel0, uv);
    
    vec3 orbitCenter = vec3(cos(iTime), sin(iTime), 0.0);
    float orbitRadius = 0.1;
    
    sSphere orbitSphere;
    initSphere(orbitSphere, orbitCenter, orbitRadius);
    
    vec3 orbitDist;
    orbitDist.xy = ray.direction.xy - orbitCenter.xy;
    float orbitDistSq = dot(orbitDist.xy, orbitDist.xy);
    float orbitRadiusSq = orbitRadius * orbitRadius;
    
    if (orbitDistSq <= orbitRadiusSq)
    {
        sLight light;
        initLight(light, color4(1.0, 1.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0), 100.0);
        
        vec3 lightPos = orbitSphere.sCenter.xyz + vec3(orbitDist.x, orbitDist.y, sqrt(orbitDist.z));
        
        vec3 normal = (lightPos - orbitSphere.sCenter.xyz) / orbitSphere.sRadius;
        vec3 lightVector = normalize(light.sCenter.xyz - vec3(ray.origin.xy, 0.0));
        vec3 diffuseCoefficient = normal * lightVector;

        vec3 attenuation = 1.0 / (1.0 + ((light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) / light.sIntensity) + (((light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) * (light.sCenter.xyz - vec3(ray.origin.xy, 0.0)) / (light.sIntensity * light.sIntensity))));

        vec3 diffuseIntensity = diffuseCoefficient * attenuation;

        fragColor = color4(diffuseIntensity.bbb * light.sColor * color3(0.0, 5.0 / 255.0, 125.0 / 225.0), 1.0);
    }
}