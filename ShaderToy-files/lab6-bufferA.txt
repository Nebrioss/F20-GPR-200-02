// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

// Step 2 code
// rotateCube: rotates cubemap texture
// 	  originalLocation: original pixel location
vec3 rotateCube(in vec3 originalLocation)
{
    vec3 rotatedLocation;
    mat2 rotationMatrix = mat2(cos(0.25 * iTime), -sin(0.25 * iTime), sin(0.25 * iTime), cos(0.25 * iTime));
    rotatedLocation.xz = originalLocation.xz * rotationMatrix;
    rotatedLocation.y = originalLocation.y;
    return rotatedLocation;
}

// step2Effect: rotates cube while adding a distortion effect
// 	  channel: cubemap texture channel
// 	  ray:	   ray hitting cube
vec4 step2Effect(samplerCube channel, sRay ray)
{
    vec3 cubeLoc = ray.direction.xyz;
    cubeLoc = rotateCube(cubeLoc);
    return texture(channel, cubeLoc);
}


// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);
    //return asPoint(sBasis(vp.viewportPoint.xy, -vp.viewportPoint.z));
    
    // Step 2 code
    return step2Effect(iChannel0, ray);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}
