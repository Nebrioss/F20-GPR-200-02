// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

vec4 rayAt(in vec4 rayDirection, in vec4 rayOrigin, float t)  
{
	return rayOrigin + t*rayDirection;
}

struct hit_record {
    vec4 p;
    vec4 normal;
    float t;
    bool front_face;
};

// set_face_normal
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//	  outward_normal
//    front_face
//    normal
void set_face_normal(in vec4 rayDirection, in vec4 rayOrigin, 
                     in vec4 outward_normal, out bool front_face, out vec4 normal) 
{
    // front_face = does this ray point in the same direction as the normalized ray?
	front_face = dot(rayDirection, outward_normal) < 0.0;
    // normal = direction that the ray is facing
	normal = front_face ? outward_normal :-outward_normal;
}
    
struct sphere {
    vec4 center;
    float radius;
};
    
bool hit_Sphere(in sphere sphere, 
                in vec4 rayDirection, in vec4 rayOrigin,
               in float t_min, in float t_max, out hit_record rec)  
{
    // various arrays used for calculations later on
    vec4 oc = rayOrigin - sphere.center;
    float a = length(rayDirection)*length(rayDirection);
    float half_b = dot(oc, rayDirection);
    float c = length(oc)*length(oc) - sphere.radius*sphere.radius;

    // determines if object will get hit
    float discriminant = half_b*half_b - a*c;

    if (discriminant > 0.0) {
        // calculate values used later in functions
        float root = sqrt(discriminant);
        float temp = (-half_b - root) / a;
        
        // tests if temp is in the range of values
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = rayAt(rayDirection, rayOrigin, rec.t);
            vec4 outward_normal = (rec.p - sphere.center) / sphere.radius;
            set_face_normal(rayDirection,rayOrigin, outward_normal,rec.front_face,rec.normal);
            return true;
        }
        
        // recalculates temp
        temp = (-half_b + root) / a;
        
        // tests if temp is in the range of values
        if (temp < t_max && temp > t_min) {
            rec.t = temp;
            rec.p = rayAt(rayDirection, rayOrigin, rec.t);
            vec4 outward_normal = (rec.p - sphere.center) / sphere.radius;
            set_face_normal(rayDirection,rayOrigin, outward_normal,rec.front_face,rec.normal);

            return true;
        }
    }
    return false;
}

// hit_list: calculate if list of objects collide with rays
//    objects:		input list of spheres
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
//	  t_min:		input temp minimum
//	  t_max:		input temp maximum
//	  rec:			output 
bool hit_list(in sphere objects[2],
              in vec4 rayDirection, in vec4 rayOrigin,
              in float t_min, in float t_max, out hit_record rec)  
{
    // vlues used later on
    hit_record temp_rec;
    bool hit_anything = false;
    float closest_so_far = t_max;
    
	// loops through objects
    for (int i =0;i < 2;i++)
    {
        // tests if current object is colliding with sphere
        if (hit_Sphere(objects[i], rayDirection,rayOrigin,t_min, closest_so_far, temp_rec)) {
            hit_anything = true;
            closest_so_far = temp_rec.t;
            rec = temp_rec;
        }
    }

    return hit_anything;
}

struct pointLight
{
    vec3 center;
    vec4 color;
    float intensity;
};

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector to be converted into a point
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    offset: input 3D vector to be converted into an offset
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

float hit_sphere(in vec3 center, in float radius, in vec4 rayDirection, in vec4 rayOrigin) {
    vec3 oc = rayOrigin.xyz - center;
    float a = dot(rayDirection, rayDirection);
    float half_b = dot(oc, rayDirection.xyz);
    float c = dot(oc, oc) - radius*radius;
    float discriminant = half_b*half_b - a*c;
    if (discriminant < 0.0) {
        return -1.0;
    } else {
        return (-half_b - sqrt(discriminant) ) / a;
    }
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;
    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;
    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;
    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);
    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    // DUMMY RESULT: OUTPUT RAY DIRECTION AS-IS
    //  -> what does the ray look like as color?
    //return rayDirection;
    
    float t = hit_sphere(vec3(0,0,-1), 0.5, rayDirection, rayOrigin);
    if (t > 0.0) {
        vec4 position_frag = rayOrigin + t * rayDirection;;
        vec3 n = normalize(position_frag.xyz - vec3(0,0,-1));
        return 0.5*vec4(n.x+1.0, n.y+1.0, n.z+1.0, 1.0);
    }
    // BACKGROUND
    return vec4(0.5, 0.5, 0.5, 1.0);
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;
    
    pointLight light;
    light.center = vec3(0, 0, -1);
    light.color = vec4(1.0, 0.0, 0.0, 1.0);
    light.intensity = 1.0;
    // ray
    vec4 rayDirection, rayOrigin;
    // setup
    fragColor = vec4(0.0);
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, focalLength,
                 fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    fragColor += calcColor(rayDirection, rayOrigin);
}