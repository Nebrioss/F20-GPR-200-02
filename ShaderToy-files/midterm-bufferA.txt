//------------------------------------------------------------
// RENDERING FUNCTIONS

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    vec3 blackHoleCenter = vec3(0.0, 0.0, -4.0);
    float schwartzRadius = 0.4;
    
    sSphere schwartzSphere;
    initSphere(schwartzSphere, blackHoleCenter, schwartzRadius);
    
    vec3 blackHoleDist;
    blackHoleDist.xy = ray.direction.xy - blackHoleCenter.xy;
    float blackHoleDistSq = dot(blackHoleDist.xy, blackHoleDist.xy);
    float schwartzRadiusSq = schwartzSphere.sRadius * schwartzSphere.sRadius;
    
    if (blackHoleDistSq <= 3.26 * schwartzRadiusSq)
    {
        ray.direction.xy = blackHoleDist.xy * (blackHoleDistSq / schwartzRadius) - blackHoleDist.xy * (schwartzRadiusSq / blackHoleDistSq) + schwartzSphere.sCenter.xy;
    }
    
    vec3 cubeLoc = ray.direction.xyz;
    
    vec2 mouse = iMouse.xy / iResolution.x;
    
    mat3 rotationMatX = mat3(1.0, 0.0, 0.0, 0.0, cos(mouse.y), sin(mouse.y), 0.0, -sin(mouse.y), cos(mouse.y));
    mat3 rotationMatY = mat3(cos(mouse.x), 0.0, -sin(mouse.x), 0.0, 1.0, 0.0, sin(mouse.x), 0.0, cos(mouse.x));
    cubeLoc = (rotationMatY * rotationMatX) * cubeLoc;
    
    return texture(iChannel0, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}