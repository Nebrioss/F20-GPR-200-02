// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


struct sLight
{
    vec4 sCenter;
    vec3 sColor;
    float sIntensity;
};

void initLight(out sLight light, in vec4 center, in vec3 color, in float intensity)
{
    light.sCenter = center;
    light.sColor = color;
    light.sIntensity = intensity;
}


//------------------------------------------------------------
// RENDERING FUNCTIONS


// Step 2 code
sCoord wave(in sCoord originalLocation)
{
    sCoord deformedLocation;
    deformedLocation.x = originalLocation.x + 0.1 * iTime;
    deformedLocation.y = originalLocation.y + 0.01 * cos(100.0 * originalLocation.x + iTime);
    return deformedLocation;
}

// Step 4 code
vec3 rotateCube(in vec3 originalLocation)
{
    vec3 rotatedLocation;
    
    return rotatedLocation;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray)
{
    // test inputs
    //return color4(ray.direction.xyz == vp.viewportPoint.xyz); // pass
    //return color4(lengthSq(vp.viewportPoint.xy) >= 0.25); // pass
    //return color4(vp.uv, 0.0, 0.0);
    //return color4(vp.ndc, 0.0, 0.0);//return vp.viewportPoint;
    
    // const color
    //return vec4(1.0, 0.5, 0.0, 1.0);
    
    // texture (full-screen)
    //sampler2D tex = iChannel0;
    //sCoord loc = vp.uv; // relative to display (output)
    
    // Step 1 code
    /*
    sCoord px = vp.pixelCoord;
    sDCoord res0 = iChannelResolution[0].xy;
    sScalar ratio0 = res0.y * vp.resolutionInv.y;
    sCoord loc0 = ratio0 * px / res0; // relative to texture (output)
    //loc = ratio * loc + 0.1 * vec2(iTime, 0.0); // zoom
    vec4 color0 = texture(iChannel0, loc0);
    
    sDCoord res1 = iChannelResolution[1].xy;
    sScalar ratio1 = res1.y * vp.resolutionInv.y;
    sCoord loc1 = ratio1 * px / res1;
    vec4 color1 = texture(iChannel1, loc1);
    
    return mix(color0, color1, 0.5 + 0.5 * cos(iTime));
	*/
    
    // Step 2 code
    /*
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = px / res;
    loc = wave(loc);
    
    return texture(iChannel0, loc);
	*/
    
    // Step 3 code
    sCoord px = vp.pixelCoord;
    sDCoord res = iChannelResolution[0].xy;
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord loc = ratio * px / res;
    
    sLight light;
    initLight(light, vec4(iResolution.xy / 2.0, 10.0, 0.0), vec3(1.0, 0.75, 0.0), 100.0);
    
    light.sCenter.xy = vec2(0.5 * iResolution.x + 100.0 * cos(2.0 * iTime), 0.5 * iResolution.y + 100.0 * sin(2.0 * iTime));
    
    vec3 normal = normalize(vec3(vp.resolutionInv.xy, 1.0));
    vec3 lightVector = normalize(light.sCenter.xyz - vec3(px, 0.0));
    vec3 diffuseCoefficient = normal * lightVector;
    
    vec3 attenuation = 1.0 / (1.0 + ((light.sCenter.xyz - vec3(px, 0.0)) / light.sIntensity) + (((light.sCenter.xyz - vec3(px, 0.0)) * (light.sCenter.xyz - vec3(px, 0.0)) / (light.sIntensity * light.sIntensity))));
    
    vec3 diffuseIntensity = diffuseCoefficient * attenuation;
    
    return vec4(diffuseIntensity.bbb * light.sColor * texture(iChannel0, loc).xyz, 1.0);
    
    // Step 4 code
    /*
    vec3 cubeLoc = ray.direction.xyz;
    return texture(iChannel2, cubeLoc);
    */

    //return texture(iChannel0, loc); // color
    //return texture(iChannel0, loc).rrrr; // grayscale
    
    //testing for shading
    //return vp.viewportPoint;
    //return vec4(0.0, 0.0, 1.0, 1.0);
    //return vec4(normalize(vec3(vp.viewportPoint.xy, 0.5)), 1.0);
    
    //cube map
    // sampler type: 'sampler cube'
    //vec3 cubeLoc = ray.direction.xyz;
    //return texture(iChannel1, cubeLoc);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray);
}